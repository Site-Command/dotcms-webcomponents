/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';
import {
  DotBinaryFileEvent,
  DotFieldStatusEvent,
  DotFieldValueEvent,
  DotInputCalendarStatusEvent,
} from './models';

export namespace Components {
  interface DotBinaryFile {
    /**
    * (optional) Text that be shown when the URL is not valid
    */
    'URLValidationMessage': string;
    /**
    * (optional) Describes a type of file that may be selected by the user, separated by comma  eg: .pdf,.jpg
    */
    'accept': string;
    /**
    * (optional) Text that be shown in the browse file button
    */
    'buttonLabel': string;
    /**
    * Clear value of selected file, when the endpoint fails.
    */
    'clearValue': () => Promise<void>;
    /**
    * (optional) Disables field's interaction
    */
    'disabled': boolean;
    /**
    * (optional) Text that be shown in the browse file button
    */
    'errorMessage': string;
    /**
    * (optional) Hint text that suggest a clue of the field
    */
    'hint': string;
    /**
    * (optional) Text to be rendered next to input field
    */
    'label': string;
    /**
    * (optional) Set the max file size limit
    */
    'maxFileLength': string;
    /**
    * Name that will be used as ID
    */
    'name': string;
    /**
    * (optional) Placeholder specifies a short hint that describes the expected value of the input field
    */
    'placeholder': string;
    /**
    * (optional) Name of the file uploaded
    */
    'previewImageName': string;
    /**
    * (optional) URL of the file uploaded
    */
    'previewImageUrl': string;
    /**
    * (optional) Determine if it is mandatory
    */
    'required': boolean;
    /**
    * (optional) Text that be shown when required is set and condition not met
    */
    'requiredMessage': string;
    /**
    * Reset properties of the field, clear value and emit events.
    */
    'reset': () => Promise<void>;
    /**
    * (optional) Text that be shown when the Regular Expression condition not met
    */
    'validationMessage': string;
  }
  interface DotBinaryFilePreview {
    /**
    * (optional) Delete button's label
    */
    'deleteLabel': string;
    /**
    * file name to be displayed
    */
    'fileName': string;
    /**
    * (optional) file URL to be displayed
    */
    'previewUrl': string;
  }
  interface DotBinaryTextField {
    /**
    * (optional) Describes a type of file that may be selected by the user, separated by comma  eg: .pdf,.jpg
    */
    'accept': string;
    /**
    * (optional) Disables field's interaction
    */
    'disabled': boolean;
    /**
    * (optional) Hint text that suggest a clue of the field
    */
    'hint': string;
    /**
    * (optional) Placeholder specifies a short hint that describes the expected value of the input field
    */
    'placeholder': string;
    /**
    * (optional) Determine if it is mandatory
    */
    'required': boolean;
    /**
    * Value specifies the value of the <input> element
    */
    'value': any;
  }
  interface DotBinaryUploadButton {
    /**
    * (optional) Describes a type of file that may be selected by the user, separated by comma  eg: .pdf,.jpg
    */
    'accept': string;
    /**
    * (optional) Text that be shown in the browse file button
    */
    'buttonLabel': string;
    /**
    * (optional) Disables field's interaction
    */
    'disabled': boolean;
    /**
    * Name that will be used as ID
    */
    'name': string;
    /**
    * (optional) Determine if it is mandatory
    */
    'required': boolean;
  }
  interface DotInputCalendar {
    /**
    * (optional) Disables field's interaction
    */
    'disabled': boolean;
    /**
    * (optional) Max, maximum value that the field will allow to set, expect a Date Format
    */
    'max': string;
    /**
    * (optional) Min, minimum value that the field will allow to set, expect a Date Format.
    */
    'min': string;
    /**
    * Name that will be used as ID
    */
    'name': string;
    /**
    * (optional) Determine if it is mandatory
    */
    'required': boolean;
    /**
    * Reset properties of the field, clear value and emit events.
    */
    'reset': () => Promise<any>;
    /**
    * (optional) Step specifies the legal number intervals for the input field
    */
    'step': string;
    /**
    * type specifies the type of <input> element to display
    */
    'type': string;
    /**
    * Value specifies the value of the <input> element
    */
    'value': string;
  }
  interface DotLabel {
    /**
    * (optional) Text to be rendered
    */
    'label': string;
    /**
    * (optional) Field name
    */
    'name': string;
    /**
    * (optional) Determine if it is mandatory
    */
    'required': boolean;
  }
  interface DotTextfield {
    /**
    * (optional) Disables field's interaction
    */
    'disabled': boolean;
    /**
    * (optional) Hint text that suggest a clue of the field
    */
    'hint': string;
    /**
    * (optional) Text to be rendered next to input field
    */
    'label': string;
    /**
    * Name that will be used as ID
    */
    'name': string;
    /**
    * (optional) Placeholder specifies a short hint that describes the expected value of the input field
    */
    'placeholder': string;
    /**
    * (optional) Regular expresion that is checked against the value to determine if is valid
    */
    'regexCheck': string;
    /**
    * (optional) Determine if it is mandatory
    */
    'required': boolean;
    /**
    * (optional) Text that be shown when required is set and condition not met
    */
    'requiredMessage': string;
    /**
    * Reset properties of the field, clear value and emit events.
    */
    'reset': () => Promise<void>;
    /**
    * type specifies the type of <input> element to display
    */
    'type': string;
    /**
    * (optional) Text that be shown when the Regular Expression condition not met
    */
    'validationMessage': string;
    /**
    * Value specifies the value of the <input> element
    */
    'value': string;
  }
}

declare global {


  interface HTMLDotBinaryFileElement extends Components.DotBinaryFile, HTMLStencilElement {}
  var HTMLDotBinaryFileElement: {
    prototype: HTMLDotBinaryFileElement;
    new (): HTMLDotBinaryFileElement;
  };

  interface HTMLDotBinaryFilePreviewElement extends Components.DotBinaryFilePreview, HTMLStencilElement {}
  var HTMLDotBinaryFilePreviewElement: {
    prototype: HTMLDotBinaryFilePreviewElement;
    new (): HTMLDotBinaryFilePreviewElement;
  };

  interface HTMLDotBinaryTextFieldElement extends Components.DotBinaryTextField, HTMLStencilElement {}
  var HTMLDotBinaryTextFieldElement: {
    prototype: HTMLDotBinaryTextFieldElement;
    new (): HTMLDotBinaryTextFieldElement;
  };

  interface HTMLDotBinaryUploadButtonElement extends Components.DotBinaryUploadButton, HTMLStencilElement {}
  var HTMLDotBinaryUploadButtonElement: {
    prototype: HTMLDotBinaryUploadButtonElement;
    new (): HTMLDotBinaryUploadButtonElement;
  };

  interface HTMLDotInputCalendarElement extends Components.DotInputCalendar, HTMLStencilElement {}
  var HTMLDotInputCalendarElement: {
    prototype: HTMLDotInputCalendarElement;
    new (): HTMLDotInputCalendarElement;
  };

  interface HTMLDotLabelElement extends Components.DotLabel, HTMLStencilElement {}
  var HTMLDotLabelElement: {
    prototype: HTMLDotLabelElement;
    new (): HTMLDotLabelElement;
  };

  interface HTMLDotTextfieldElement extends Components.DotTextfield, HTMLStencilElement {}
  var HTMLDotTextfieldElement: {
    prototype: HTMLDotTextfieldElement;
    new (): HTMLDotTextfieldElement;
  };
  interface HTMLElementTagNameMap {
    'dot-binary-file': HTMLDotBinaryFileElement;
    'dot-binary-file-preview': HTMLDotBinaryFilePreviewElement;
    'dot-binary-text-field': HTMLDotBinaryTextFieldElement;
    'dot-binary-upload-button': HTMLDotBinaryUploadButtonElement;
    'dot-input-calendar': HTMLDotInputCalendarElement;
    'dot-label': HTMLDotLabelElement;
    'dot-textfield': HTMLDotTextfieldElement;
  }
}

declare namespace LocalJSX {
  interface DotBinaryFile {
    /**
    * (optional) Text that be shown when the URL is not valid
    */
    'URLValidationMessage'?: string;
    /**
    * (optional) Describes a type of file that may be selected by the user, separated by comma  eg: .pdf,.jpg
    */
    'accept'?: string;
    /**
    * (optional) Text that be shown in the browse file button
    */
    'buttonLabel'?: string;
    /**
    * (optional) Disables field's interaction
    */
    'disabled'?: boolean;
    /**
    * (optional) Text that be shown in the browse file button
    */
    'errorMessage'?: string;
    /**
    * (optional) Hint text that suggest a clue of the field
    */
    'hint'?: string;
    /**
    * (optional) Text to be rendered next to input field
    */
    'label'?: string;
    /**
    * (optional) Set the max file size limit
    */
    'maxFileLength'?: string;
    /**
    * Name that will be used as ID
    */
    'name'?: string;
    'onDotStatusChange'?: (event: CustomEvent<DotFieldStatusEvent>) => void;
    'onDotValueChange'?: (event: CustomEvent<DotFieldValueEvent>) => void;
    /**
    * (optional) Placeholder specifies a short hint that describes the expected value of the input field
    */
    'placeholder'?: string;
    /**
    * (optional) Name of the file uploaded
    */
    'previewImageName'?: string;
    /**
    * (optional) URL of the file uploaded
    */
    'previewImageUrl'?: string;
    /**
    * (optional) Determine if it is mandatory
    */
    'required'?: boolean;
    /**
    * (optional) Text that be shown when required is set and condition not met
    */
    'requiredMessage'?: string;
    /**
    * (optional) Text that be shown when the Regular Expression condition not met
    */
    'validationMessage'?: string;
  }
  interface DotBinaryFilePreview {
    /**
    * (optional) Delete button's label
    */
    'deleteLabel'?: string;
    /**
    * file name to be displayed
    */
    'fileName'?: string;
    /**
    * Emit when the file is deleted
    */
    'onDelete'?: (event: CustomEvent<any>) => void;
    /**
    * (optional) file URL to be displayed
    */
    'previewUrl'?: string;
  }
  interface DotBinaryTextField {
    /**
    * (optional) Describes a type of file that may be selected by the user, separated by comma  eg: .pdf,.jpg
    */
    'accept'?: string;
    /**
    * (optional) Disables field's interaction
    */
    'disabled'?: boolean;
    /**
    * (optional) Hint text that suggest a clue of the field
    */
    'hint'?: string;
    'onFileChange'?: (event: CustomEvent<DotBinaryFileEvent>) => void;
    'onLostFocus'?: (event: CustomEvent<any>) => void;
    /**
    * (optional) Placeholder specifies a short hint that describes the expected value of the input field
    */
    'placeholder'?: string;
    /**
    * (optional) Determine if it is mandatory
    */
    'required'?: boolean;
    /**
    * Value specifies the value of the <input> element
    */
    'value'?: any;
  }
  interface DotBinaryUploadButton {
    /**
    * (optional) Describes a type of file that may be selected by the user, separated by comma  eg: .pdf,.jpg
    */
    'accept'?: string;
    /**
    * (optional) Text that be shown in the browse file button
    */
    'buttonLabel'?: string;
    /**
    * (optional) Disables field's interaction
    */
    'disabled'?: boolean;
    /**
    * Name that will be used as ID
    */
    'name'?: string;
    'onFileChange'?: (event: CustomEvent<DotBinaryFileEvent>) => void;
    /**
    * (optional) Determine if it is mandatory
    */
    'required'?: boolean;
  }
  interface DotInputCalendar {
    /**
    * (optional) Disables field's interaction
    */
    'disabled'?: boolean;
    /**
    * (optional) Max, maximum value that the field will allow to set, expect a Date Format
    */
    'max'?: string;
    /**
    * (optional) Min, minimum value that the field will allow to set, expect a Date Format.
    */
    'min'?: string;
    /**
    * Name that will be used as ID
    */
    'name'?: string;
    'on_dotStatusChange'?: (event: CustomEvent<DotInputCalendarStatusEvent>) => void;
    'on_dotValueChange'?: (event: CustomEvent<DotFieldValueEvent>) => void;
    /**
    * (optional) Determine if it is mandatory
    */
    'required'?: boolean;
    /**
    * (optional) Step specifies the legal number intervals for the input field
    */
    'step'?: string;
    /**
    * type specifies the type of <input> element to display
    */
    'type'?: string;
    /**
    * Value specifies the value of the <input> element
    */
    'value'?: string;
  }
  interface DotLabel {
    /**
    * (optional) Text to be rendered
    */
    'label'?: string;
    /**
    * (optional) Field name
    */
    'name'?: string;
    /**
    * (optional) Determine if it is mandatory
    */
    'required'?: boolean;
  }
  interface DotTextfield {
    /**
    * (optional) Disables field's interaction
    */
    'disabled'?: boolean;
    /**
    * (optional) Hint text that suggest a clue of the field
    */
    'hint'?: string;
    /**
    * (optional) Text to be rendered next to input field
    */
    'label'?: string;
    /**
    * Name that will be used as ID
    */
    'name'?: string;
    'onDotStatusChange'?: (event: CustomEvent<DotFieldStatusEvent>) => void;
    'onDotValueChange'?: (event: CustomEvent<DotFieldValueEvent>) => void;
    /**
    * (optional) Placeholder specifies a short hint that describes the expected value of the input field
    */
    'placeholder'?: string;
    /**
    * (optional) Regular expresion that is checked against the value to determine if is valid
    */
    'regexCheck'?: string;
    /**
    * (optional) Determine if it is mandatory
    */
    'required'?: boolean;
    /**
    * (optional) Text that be shown when required is set and condition not met
    */
    'requiredMessage'?: string;
    /**
    * type specifies the type of <input> element to display
    */
    'type'?: string;
    /**
    * (optional) Text that be shown when the Regular Expression condition not met
    */
    'validationMessage'?: string;
    /**
    * Value specifies the value of the <input> element
    */
    'value'?: string;
  }

  interface IntrinsicElements {
    'dot-binary-file': DotBinaryFile;
    'dot-binary-file-preview': DotBinaryFilePreview;
    'dot-binary-text-field': DotBinaryTextField;
    'dot-binary-upload-button': DotBinaryUploadButton;
    'dot-input-calendar': DotInputCalendar;
    'dot-label': DotLabel;
    'dot-textfield': DotTextfield;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements {
      'dot-binary-file': LocalJSX.DotBinaryFile & JSXBase.HTMLAttributes<HTMLDotBinaryFileElement>;
      'dot-binary-file-preview': LocalJSX.DotBinaryFilePreview & JSXBase.HTMLAttributes<HTMLDotBinaryFilePreviewElement>;
      'dot-binary-text-field': LocalJSX.DotBinaryTextField & JSXBase.HTMLAttributes<HTMLDotBinaryTextFieldElement>;
      'dot-binary-upload-button': LocalJSX.DotBinaryUploadButton & JSXBase.HTMLAttributes<HTMLDotBinaryUploadButtonElement>;
      'dot-input-calendar': LocalJSX.DotInputCalendar & JSXBase.HTMLAttributes<HTMLDotInputCalendarElement>;
      'dot-label': LocalJSX.DotLabel & JSXBase.HTMLAttributes<HTMLDotLabelElement>;
      'dot-textfield': LocalJSX.DotTextfield & JSXBase.HTMLAttributes<HTMLDotTextfieldElement>;
    }
  }
}


