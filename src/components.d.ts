/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';
import {
  DotFieldStatusEvent,
  DotFieldValueEvent,
} from './models';

export namespace Components {
  interface DotLabel {
    /**
    * (optional) Text to be rendered
    */
    'label': string;
    /**
    * (optional) Field name
    */
    'name': string;
    /**
    * (optional) Determine if it is mandatory
    */
    'required': boolean;
  }
  interface DotTextfield {
    /**
    * (optional) Disables field's interaction
    */
    'disabled': boolean;
    /**
    * (optional) Hint text that suggest a clue of the field
    */
    'hint': string;
    /**
    * (optional) Text to be rendered next to input field
    */
    'label': string;
    /**
    * Name that will be used as ID
    */
    'name': string;
    /**
    * (optional) Placeholder specifies a short hint that describes the expected value of the input field
    */
    'placeholder': string;
    /**
    * (optional) Regular expresion that is checked against the value to determine if is valid
    */
    'regexCheck': string;
    /**
    * (optional) Determine if it is mandatory
    */
    'required': boolean;
    /**
    * (optional) Text that be shown when required is set and condition not met
    */
    'requiredMessage': string;
    /**
    * Reset properties of the field, clear value and emit events.
    */
    'reset': () => Promise<void>;
    /**
    * type specifies the type of <input> element to display
    */
    'type': string;
    /**
    * (optional) Text that be shown when the Regular Expression condition not met
    */
    'validationMessage': string;
    /**
    * Value specifies the value of the <input> element
    */
    'value': string;
  }
}

declare global {


  interface HTMLDotLabelElement extends Components.DotLabel, HTMLStencilElement {}
  var HTMLDotLabelElement: {
    prototype: HTMLDotLabelElement;
    new (): HTMLDotLabelElement;
  };

  interface HTMLDotTextfieldElement extends Components.DotTextfield, HTMLStencilElement {}
  var HTMLDotTextfieldElement: {
    prototype: HTMLDotTextfieldElement;
    new (): HTMLDotTextfieldElement;
  };
  interface HTMLElementTagNameMap {
    'dot-label': HTMLDotLabelElement;
    'dot-textfield': HTMLDotTextfieldElement;
  }
}

declare namespace LocalJSX {
  interface DotLabel {
    /**
    * (optional) Text to be rendered
    */
    'label'?: string;
    /**
    * (optional) Field name
    */
    'name'?: string;
    /**
    * (optional) Determine if it is mandatory
    */
    'required'?: boolean;
  }
  interface DotTextfield {
    /**
    * (optional) Disables field's interaction
    */
    'disabled'?: boolean;
    /**
    * (optional) Hint text that suggest a clue of the field
    */
    'hint'?: string;
    /**
    * (optional) Text to be rendered next to input field
    */
    'label'?: string;
    /**
    * Name that will be used as ID
    */
    'name'?: string;
    'onDotStatusChange'?: (event: CustomEvent<DotFieldStatusEvent>) => void;
    'onDotValueChange'?: (event: CustomEvent<DotFieldValueEvent>) => void;
    /**
    * (optional) Placeholder specifies a short hint that describes the expected value of the input field
    */
    'placeholder'?: string;
    /**
    * (optional) Regular expresion that is checked against the value to determine if is valid
    */
    'regexCheck'?: string;
    /**
    * (optional) Determine if it is mandatory
    */
    'required'?: boolean;
    /**
    * (optional) Text that be shown when required is set and condition not met
    */
    'requiredMessage'?: string;
    /**
    * type specifies the type of <input> element to display
    */
    'type'?: string;
    /**
    * (optional) Text that be shown when the Regular Expression condition not met
    */
    'validationMessage'?: string;
    /**
    * Value specifies the value of the <input> element
    */
    'value'?: string;
  }

  interface IntrinsicElements {
    'dot-label': DotLabel;
    'dot-textfield': DotTextfield;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements {
      'dot-label': LocalJSX.DotLabel & JSXBase.HTMLAttributes<HTMLDotLabelElement>;
      'dot-textfield': LocalJSX.DotTextfield & JSXBase.HTMLAttributes<HTMLDotTextfieldElement>;
    }
  }
}


